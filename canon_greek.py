#!/usr/bin/env python
#coding: utf-8

#    canon_greek.py is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import re, codecs

import blib
import grc_translit
from canon_foreign import canon_links

langs_with_terms_derived_from_ancient_greek = [
  u"Abkhaz",
  u"Adyghe",
  u"Afrikaans",
  u"Albanian",
  u"Arabic",
  u"Aragonese",
  u"Aramaic",
  u"Armenian",
  u"Aromanian",
  u"Asturian",
  u"Azeri",
  u"Bactrian",
  u"Bashkir",
  u"Basque",
  u"Belarusian",
  u"Bengali",
  u"Breton",
  u"Bulgarian",
  u"Burmese",
  u"Catalan",
  u"Central Kurdish",
  u"Central Melanau",
  u"Chinese",
  u"Classical Nahuatl",
  u"Classical Syriac",
  u"Coptic",
  u"Cornish",
  u"Corsican",
  u"Crimean Tatar",
  u"Czech",
  u"Dalmatian",
  u"Danish",
  u"Dutch",
  u"Emilian",
  u"English",
  u"Esperanto",
  u"Estonian",
  u"Faroese",
  u"Finnish",
  u"Franco-Provençal",
  u"French",
  u"Friulian",
  u"Gagauz",
  u"Galician",
  u"Gallo",
  u"Georgian",
  u"German Low German",
  u"German",
  u"Gothic",
  u"Greek",
  u"Greenlandic",
  u"Gujarati",
  u"Hausa",
  u"Hawaiian",
  u"Hebrew",
  u"Hiligaynon",
  u"Hindi",
  u"Hungarian",
  u"Icelandic",
  u"Ido",
  u"Indonesian",
  u"Ingrian",
  u"Interlingua",
  u"Irish",
  u"Istriot",
  u"Istro-Romanian",
  u"Italian",
  u"Japanese",
  u"Javanese",
  u"Karelian",
  u"Kazakh",
  u"Korean",
  u"Kurdish",
  u"Kyrgyz",
  u"Ladino",
  u"Latin",
  u"Latvian",
  u"Ligurian",
  u"Limburgish",
  u"Lithuanian",
  u"Livonian",
  u"Logudorese Sardinian",
  u"Lojban",
  u"Lombard",
  u"Low German",
  u"Lower Sorbian",
  u"Luxembourgish",
  u"Macedonian",
  u"Maithili",
  u"Malay",
  u"Maltese",
  u"Manx",
  u"Marshallese",
  u"Middle Armenian",
  u"Middle Dutch",
  u"Middle English",
  u"Middle French",
  u"Middle High German",
  u"Middle Irish",
  u"Middle Persian",
  u"Middle Welsh",
  u"Mirandese",
  u"Mongolian",
  u"Neapolitan",
  u"Nepali",
  u"Norman",
  u"Norwegian Bokmål",
  u"Norwegian Nynorsk",
  u"Norwegian",
  u"Novial",
  u"Occitan",
  u"Old Armenian",
  u"Old Church Slavonic",
  u"Old East Slavic",
  u"Old English",
  u"Old French",
  u"Old Georgian",
  u"Old High German",
  u"Old Irish",
  u"Old Italian",
  u"Old Norse",
  u"Old Portuguese",
  u"Old Provençal",
  u"Old Saxon",
  u"Old Spanish",
  u"Ossetian",
  u"Ottoman Turkish",
  u"Pashto",
  u"Persian",
  u"Piedmontese",
  u"Pohnpeian",
  u"Polish",
  u"Portuguese",
  u"Proto-Germanic",
  u"Proto-Slavic",
  u"Punjabi",
  u"Quechua",
  u"Rajasthani",
  u"Romanian",
  u"Romansch",
  u"Russian",
  u"Samogitian",
  u"Sanskrit",
  u"Sardinian",
  u"Scots",
  u"Scottish Gaelic",
  u"Serbo-Croatian",
  u"Sicilian",
  u"Skolt Sami",
  u"Slovak",
  u"Slovene",
  u"Spanish",
  u"Swedish",
  u"Tagalog",
  u"Tajik",
  u"Telugu",
  u"Tetum",
  u"Thai",
  u"Translingual",
  u"Tsakonian",
  u"Turkish",
  u"Turkmen",
  u"Ukrainian",
  u"Upper Sorbian",
  u"Urdu",
  u"Uyghur",
  u"Uzbek",
  u"Venetian",
  u"Vietnamese",
  u"Volapük",
  u"Võro",
  u"Walloon",
  u"Welsh",
  u"West Frisian",
  u"Yiddish",
  u"Zazaki",
]

pa = blib.init_argparser("Canonicalize Greek and translit")
pa.add_argument("--cattype", default="borrowed",
    help="Categories to examine ('vocab', 'borrowed', 'translation', 'pagetext')")
pa.add_argument("--page-file",
    help="""File containing "pages" to process when --cattype pagetext""")

params = pa.parse_args()
startFrom, upTo = blib.parse_start_end(params.start, params.end)
pages_to_do = []
if params.page_file:
  for line in codecs.open(params.page_file, "r", encoding="utf-8"):
    line = line.strip()
    m = re.match(r"\* \[\[(.*?)]]: .*?<nowiki>(.*?)</nowiki>$", line)
    if not m:
      msg("WARNING: Unable to parse line: [%s]" % line)
    else:
      pages_to_do.append(m.groups())

canon_links(params.save, params.verbose, params.cattype, "grc", "Ancient Greek",
    "polytonic", grc_translit, langs_with_terms_derived_from_ancient_greek,
    startFrom, upTo, pages_to_do=pages_to_do)
